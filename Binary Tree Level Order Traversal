=begin


Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]

=end
# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val)
#         @val = val
#         @left, @right = nil, nil
#     end
# end

# @param {TreeNode} root
# @return {Integer[][]}
def level_order(root)
    return [] if root.nil?
    visited = [[root,0]]
    res = []
    while !visited.empty?
        a, level = visited.pop
        #if first time initiate with an empty array, associated with level 0
        res[level] ||= []
        #add current value of the node to the index indicating the current level of the tree
        res[level] << a.val
        print "#{a.val}, "
        if a.right 
            visited << [a.right, level+1] 
        end
        if a.left 
            visited << [a.left, level +1] 
        end
        
    end
    
    
res
